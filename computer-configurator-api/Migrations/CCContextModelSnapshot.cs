// <auto-generated />
using System;
using ComputerConfigurator.Api;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ComputerConfigurator.Api.Migrations
{
    [DbContext(typeof(CCContext))]
    partial class CCContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ComputerConfigurator.Api.Account.Account", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("salt");

                    b.Property<DateTime>("TimestampCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("timestampcreated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(3)");

                    b.HasKey("UUID")
                        .HasName("account_pkey");

                    b.HasIndex(new[] { "Email" }, "account_email_unique")
                        .IsUnique();

                    b.ToTable("account", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.AudioPort.AudioPort", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("ConnectorSize")
                        .HasColumnType("integer")
                        .HasColumnName("connectorsize");

                    b.Property<int>("PinCount")
                        .HasColumnType("integer")
                        .HasColumnName("pincount");

                    b.HasKey("UUID")
                        .HasName("audioport_pkey");

                    b.HasIndex("PinCount", "ConnectorSize")
                        .IsUnique();

                    b.ToTable("audioport", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.BenchmarkedResolution.BenchmarkedResolution", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("PixelHeight")
                        .HasColumnType("integer")
                        .HasColumnName("pixelheight");

                    b.Property<int>("PixelWidth")
                        .HasColumnType("integer")
                        .HasColumnName("pixelwidth");

                    b.HasKey("UUID")
                        .HasName("benchmarkedresolution_pkey");

                    b.HasIndex(new[] { "PixelWidth", "PixelHeight" }, "benchmarkedresolution_pixelarea_unique")
                        .IsUnique();

                    b.ToTable("benchmarkedresolution", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.ChassisAudioPort.ChassisAudioPort", b =>
                {
                    b.Property<Guid>("ChassisUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("chassisuuid");

                    b.Property<Guid>("AudioPortUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("audiportuuid");

                    b.Property<Guid>("ChassisZoneUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("chassiszoneuuid");

                    b.HasKey("ChassisUUID", "AudioPortUUID", "ChassisZoneUUID")
                        .HasName("chassis_audioport_pkey");

                    b.HasIndex("AudioPortUUID");

                    b.HasIndex("ChassisZoneUUID");

                    b.ToTable("chassis_audioport", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.ChassisFanSupport.ChassisFanSupport", b =>
                {
                    b.Property<Guid>("ChassisUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("chassisuuid");

                    b.Property<Guid>("FanDiameterUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("fandiameteruuid");

                    b.Property<Guid>("ChassisZoneUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("chassiszoneuuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<int>("MaximumWidthMM")
                        .HasColumnType("integer")
                        .HasColumnName("maximumwidthmm");

                    b.HasKey("ChassisUUID", "FanDiameterUUID", "ChassisZoneUUID")
                        .HasName("chassis_fansupport_pkey");

                    b.HasIndex("ChassisZoneUUID");

                    b.HasIndex("FanDiameterUUID");

                    b.ToTable("chassis_fansupport", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.ChassisFilterSupport.ChassisFilterSupport", b =>
                {
                    b.Property<Guid>("ChassisUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("chassisuuid");

                    b.Property<Guid>("ChassisZoneUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("chassiszoneuuid");

                    b.Property<bool>("Removeable")
                        .HasColumnType("boolean")
                        .HasColumnName("removeable");

                    b.HasKey("ChassisUUID", "ChassisZoneUUID")
                        .HasName("chassis_filtersupport_pkey");

                    b.HasIndex("ChassisZoneUUID");

                    b.ToTable("chassis_filtersupport", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.ChassisMotherboardFormFactorSupport.ChassisMotherboardFormFactorSupport", b =>
                {
                    b.Property<Guid>("ChassisUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("chassisuuid");

                    b.Property<Guid>("MotherboardFormFactorUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("motherboardformfactoruuid");

                    b.HasKey("ChassisUUID", "MotherboardFormFactorUUID")
                        .HasName("chassis_motherboardformfactorsupport_pkey");

                    b.HasIndex("MotherboardFormFactorUUID");

                    b.ToTable("chassis_motherboardformfactorsupport", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.ChassisPowerSupplyFormFactorSupport.ChassisPowerSupplyFormFactorSupport", b =>
                {
                    b.Property<Guid>("ChassisUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("chassisuuid");

                    b.Property<Guid>("PowerSupplyFormFactorUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("powersupplyformfactoruuid");

                    b.Property<bool>("BracketRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("bracketrequired");

                    b.HasKey("ChassisUUID", "PowerSupplyFormFactorUUID")
                        .HasName("chassis_powersupplyformfactorsupport_pkey");

                    b.HasIndex("PowerSupplyFormFactorUUID");

                    b.ToTable("chassis_powersupplyformfactorsupport", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.ChassisRadiatorSupport.ChassisRadiatorSupport", b =>
                {
                    b.Property<Guid>("ChassisUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("chassisuuid");

                    b.Property<Guid>("RadiatorSizeUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("radiatorsizeuuid");

                    b.Property<Guid>("ChassisZoneUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("chassiszoneuuid");

                    b.Property<int>("MaximumWidthMM")
                        .HasColumnType("integer")
                        .HasColumnName("maximumwidthmm");

                    b.HasKey("ChassisUUID", "RadiatorSizeUUID", "ChassisZoneUUID")
                        .HasName("chassis_radiatorsupport_pkey");

                    b.HasIndex("ChassisZoneUUID");

                    b.HasIndex("RadiatorSizeUUID");

                    b.ToTable("chassis_radiatorsupport", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.ChassisUSBPort.ChassisUSBPort", b =>
                {
                    b.Property<Guid>("ChassisUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("chassisuuid");

                    b.Property<Guid>("USBPortUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("usbportuuid");

                    b.Property<Guid>("ChassisZoneUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("chassiszoneuuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.HasKey("ChassisUUID", "USBPortUUID", "ChassisZoneUUID")
                        .HasName("chassis_usbport_pkey");

                    b.HasIndex("ChassisZoneUUID");

                    b.HasIndex("USBPortUUID");

                    b.ToTable("chassis_usbport", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.ChassisZone.ChassisZone", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Zone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("zone");

                    b.HasKey("UUID")
                        .HasName("chassiszone_pkey");

                    b.HasIndex(new[] { "Zone" }, "chassiszone_zone_unique")
                        .IsUnique();

                    b.ToTable("chassiszone", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.CPUSocket.CPUSocket", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("version");

                    b.HasKey("UUID")
                        .HasName("cpusocket_pkey");

                    b.HasIndex(new[] { "Version" }, "cpusocket_version_unique")
                        .IsUnique();

                    b.ToTable("cpusocket", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.DisplayConnector.DisplayConnector", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Interface")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("interface");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("version");

                    b.HasKey("UUID")
                        .HasName("displayconnector_pkey");

                    b.HasIndex(new[] { "Interface", "Version" }, "displayconnector_interface_version_unique")
                        .IsUnique();

                    b.ToTable("displayconnector", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.EightyPlusRating.EightyPlusRating", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("rating");

                    b.HasKey("UUID")
                        .HasName("eightyplusrating_pkey");

                    b.HasIndex(new[] { "Rating" }, "eightyplusrating_rating_unique")
                        .IsUnique();

                    b.ToTable("eightyplusrating", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.EthernetPort.EthernetPort", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("BandwidthMBytes")
                        .HasColumnType("integer")
                        .HasColumnName("bandwidthmbytes");

                    b.Property<string>("Chipset")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("chipset");

                    b.HasKey("UUID")
                        .HasName("ethernetport_pkey");

                    b.ToTable("ethernetport", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.FanDiameter.FanDiameter", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("Diameter")
                        .HasColumnType("integer")
                        .HasColumnName("diameter");

                    b.HasKey("UUID")
                        .HasName("fandiameter_pkey");

                    b.HasIndex(new[] { "Diameter" }, "fandiameter_diameter_unique")
                        .IsUnique();

                    b.ToTable("fandiameter", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.FanHeader.FanHeader", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("PinCount")
                        .HasColumnType("integer")
                        .HasColumnName("pincount");

                    b.HasKey("UUID")
                        .HasName("fanheader_pkey");

                    b.HasIndex(new[] { "PinCount" }, "fanheader_pincount_unique")
                        .IsUnique();

                    b.ToTable("fanheader", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.FanVoltage.FanVoltage", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("Voltage")
                        .HasColumnType("integer")
                        .HasColumnName("fanvoltage");

                    b.HasKey("UUID")
                        .HasName("fanvoltage_pkey");

                    b.HasIndex(new[] { "Voltage" }, "fanvoltage_voltage_unique")
                        .IsUnique();

                    b.ToTable("fanvoltage", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.Manufacturer.Manufacturer", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("UUID")
                        .HasName("manufacturer_pkey");

                    b.HasIndex(new[] { "Name" }, "manufacturer_name_unique")
                        .IsUnique();

                    b.ToTable("manufacturer", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.MotherboardChipset.MotherboardChipset", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CPUSocketUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("cpusocketuuid");

                    b.Property<Guid>("ManufacturerUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("manufactureruuid");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("version");

                    b.HasKey("UUID")
                        .HasName("motherboardchipset_pkey");

                    b.HasIndex("CPUSocketUUID");

                    b.HasIndex(new[] { "ManufacturerUUID", "Version" }, "motherboardchipset_manufacturer_version_unique")
                        .IsUnique();

                    b.ToTable("motherboardchipset", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.MotherboardFormFactor.MotherboardFormFactor", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("FormFactor")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("formfactor");

                    b.HasKey("UUID")
                        .HasName("motherboardformfactor_pkey");

                    b.HasIndex(new[] { "FormFactor" }, "motherboardformfactor_formfactor_unique")
                        .IsUnique();

                    b.ToTable("motherboardformfactor", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.MountedStorageFormFactor.MountedStorageFormFactor", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("size");

                    b.HasKey("UUID")
                        .HasName("mountedstorageformfactor_pkey");

                    b.HasIndex(new[] { "Size" }, "mountedstorageformfactor_size_unique")
                        .IsUnique();

                    b.ToTable("mountedstorageformfactor", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.NVMEFormFactor.NVMEFormFactor", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("FormFactor")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("formfactor");

                    b.HasKey("UUID")
                        .HasName("nvmeformfactor_pkey");

                    b.HasIndex(new[] { "FormFactor" }, "nvmeformfactor_formfactor_unique")
                        .IsUnique();

                    b.ToTable("nvmeformfactor", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.NVMEInterface.NVMEInterface", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Interface")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("interface");

                    b.HasKey("UUID")
                        .HasName("nvmeinterface_pkey");

                    b.HasIndex(new[] { "Interface" }, "nvminterface_interface_unique")
                        .IsUnique();

                    b.ToTable("nvmeinterface", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.Part.Part", b =>
                {
                    b.Property<Guid>("UUID")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("LongDescription")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("longdescription");

                    b.Property<Guid>("ManufacturerUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("manufactureruuid");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("model");

                    b.Property<decimal>("Price")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)")
                        .HasColumnName("price");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("shortdescription");

                    b.HasKey("UUID")
                        .HasName("part_pkey");

                    b.HasIndex(new[] { "ManufacturerUUID", "Model" }, "part_manufacturer_model_unique")
                        .IsUnique();

                    b.ToTable("part", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.PCIEConnector.PCIEConnector", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("LaneCount")
                        .HasColumnType("integer")
                        .HasColumnName("lanecount");

                    b.Property<Guid>("PCIEGenerationUUID")
                        .HasColumnType("uuid");

                    b.HasKey("UUID")
                        .HasName("pcieconnector_pkey");

                    b.HasIndex(new[] { "PCIEGenerationUUID", "LaneCount" }, "pcieconnector_lanecount_unique")
                        .IsUnique();

                    b.ToTable("pcieconnector", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.PCIEGeneration.PCIEGeneration", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Generation")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("generation");

                    b.HasKey("UUID")
                        .HasName("pciegeneration_pkey");

                    b.HasIndex(new[] { "Generation" }, "pciegeneration_generation_unique")
                        .IsUnique();

                    b.ToTable("pciegeneration", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.PowerSupplyFormFactor.PowerSupplyFormFactor", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("FormFactor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("formfactor");

                    b.HasKey("UUID")
                        .HasName("powersupplyformfactor_pkey");

                    b.HasIndex(new[] { "FormFactor" }, "powersupplyformfactor_formfactor_unique")
                        .IsUnique();

                    b.ToTable("powersupplyformfactor", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.RadiatorSize.RadiatorSize", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("Size")
                        .HasColumnType("integer")
                        .HasColumnName("size");

                    b.HasKey("UUID")
                        .HasName("radiatorsize_pkey");

                    b.HasIndex(new[] { "Size" }, "radiatorsize_size_unique")
                        .IsUnique();

                    b.ToTable("radiatorsize", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.RAIDMode.RAIDMode", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Mode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("mode");

                    b.HasKey("UUID")
                        .HasName("raidmode_pkey");

                    b.HasIndex(new[] { "Mode" }, "raidmode_mode_unique")
                        .IsUnique();

                    b.ToTable("raidmode", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.RAMSocket.RAMSocket", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("version");

                    b.HasKey("UUID")
                        .HasName("ramsocket_pkey");

                    b.HasIndex(new[] { "Version" }, "ramsocket_version_unique")
                        .IsUnique();

                    b.ToTable("ramsocket", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.RAMSpeed.RAMSpeed", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("ClockRate")
                        .HasColumnType("integer")
                        .HasColumnName("clockrate");

                    b.HasKey("UUID")
                        .HasName("ramspeed_pkey");

                    b.HasIndex(new[] { "ClockRate" }, "ramspeed_clockrate_unique")
                        .IsUnique();

                    b.ToTable("ramspeed", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.SATAGeneration.SATAGeneration", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Generation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("generation");

                    b.HasKey("UUID")
                        .HasName("satageneration_pkey");

                    b.HasIndex(new[] { "Generation" }, "satageneration_generation_unique")
                        .IsUnique();

                    b.ToTable("satageneration", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.Session.Session", b =>
                {
                    b.Property<Guid>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("key")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("AccountUUID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LoginTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("logintimestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(3)");

                    b.Property<DateTime?>("LogoutTimestamp")
                        .HasColumnType("timestamptz")
                        .HasColumnName("logouttimestamp");

                    b.HasKey("Key")
                        .HasName("session_pkey");

                    b.HasIndex("AccountUUID");

                    b.ToTable("session", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.USBPort.USBPort", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Interface")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("interface");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("version");

                    b.HasKey("UUID")
                        .HasName("usbport_pkey");

                    b.HasIndex(new[] { "Interface", "Version" }, "usbport_interface_version_unique")
                        .IsUnique();

                    b.ToTable("usbport", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.Chassis.Chassis", b =>
                {
                    b.HasBaseType("ComputerConfigurator.Api.Part.Part");

                    b.Property<int>("HeightMM")
                        .HasColumnType("integer")
                        .HasColumnName("heightmm");

                    b.Property<int>("LengthMM")
                        .HasColumnType("integer")
                        .HasColumnName("lengthmm");

                    b.Property<int>("MaxCPUCoolerHeightMM")
                        .HasColumnType("integer")
                        .HasColumnName("maxcpucoolerheightmm");

                    b.Property<int>("MaxGPULengthMM")
                        .HasColumnType("integer")
                        .HasColumnName("maxgpulengthmm");

                    b.Property<int>("MaxPSULengthMM")
                        .HasColumnType("integer")
                        .HasColumnName("maxpsulengthmm");

                    b.Property<int>("PCIESlotCount")
                        .HasColumnType("integer")
                        .HasColumnName("pcieslotcount");

                    b.Property<int>("WidthMM")
                        .HasColumnType("integer")
                        .HasColumnName("widthmm");

                    b.ToTable("chassis", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.CPU.CPU", b =>
                {
                    b.HasBaseType("ComputerConfigurator.Api.Part.Part");

                    b.Property<int>("BaseClockSpeed")
                        .HasColumnType("integer")
                        .HasColumnName("baseclockspeed");

                    b.Property<int?>("BoostClockSpeed")
                        .HasColumnType("integer")
                        .HasColumnName("boostclockspeed");

                    b.Property<Guid>("CPUSocketUUID")
                        .HasColumnType("uuid");

                    b.Property<int>("CoreCount")
                        .HasColumnType("integer")
                        .HasColumnName("corecount");

                    b.Property<int>("ThreadCount")
                        .HasColumnType("integer")
                        .HasColumnName("threadcount");

                    b.HasIndex("CPUSocketUUID");

                    b.ToTable("cpu", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.ChassisAudioPort.ChassisAudioPort", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.AudioPort.AudioPort", "AudioPort")
                        .WithMany()
                        .HasForeignKey("AudioPortUUID")
                        .IsRequired()
                        .HasConstraintName("chassis_audioport_audioportuuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.Chassis.Chassis", "Chassis")
                        .WithMany("ChassisAudioPort")
                        .HasForeignKey("ChassisUUID")
                        .IsRequired()
                        .HasConstraintName("chassis_audioport_chassisuuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.ChassisZone.ChassisZone", "ChassisZone")
                        .WithMany()
                        .HasForeignKey("ChassisZoneUUID")
                        .IsRequired()
                        .HasConstraintName("chassis_audioport_chassiszoneuuid_fkey");

                    b.Navigation("AudioPort");

                    b.Navigation("Chassis");

                    b.Navigation("ChassisZone");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.ChassisFanSupport.ChassisFanSupport", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.Chassis.Chassis", "Chassis")
                        .WithMany("ChassisFanSupport")
                        .HasForeignKey("ChassisUUID")
                        .IsRequired()
                        .HasConstraintName("chassis_fansupport_chassisuuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.ChassisZone.ChassisZone", "ChassisZone")
                        .WithMany()
                        .HasForeignKey("ChassisZoneUUID")
                        .IsRequired()
                        .HasConstraintName("chassis_fansupport_chassiszoneuuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.FanDiameter.FanDiameter", "FanDiameter")
                        .WithMany()
                        .HasForeignKey("FanDiameterUUID")
                        .IsRequired()
                        .HasConstraintName("chassis_fansupport_fandiameteruuid_fkey");

                    b.Navigation("Chassis");

                    b.Navigation("ChassisZone");

                    b.Navigation("FanDiameter");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.ChassisFilterSupport.ChassisFilterSupport", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.Chassis.Chassis", "Chassis")
                        .WithMany("ChassisFilterSupport")
                        .HasForeignKey("ChassisUUID")
                        .IsRequired()
                        .HasConstraintName("chassis_filtersupport_chassisuuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.ChassisZone.ChassisZone", "ChassisZone")
                        .WithMany()
                        .HasForeignKey("ChassisZoneUUID")
                        .IsRequired()
                        .HasConstraintName("chassis_filtersupport_chassiszoneuuid_fkey");

                    b.Navigation("Chassis");

                    b.Navigation("ChassisZone");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.ChassisMotherboardFormFactorSupport.ChassisMotherboardFormFactorSupport", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.Chassis.Chassis", "Chassis")
                        .WithMany("ChassisMotherboardFormFactorSupport")
                        .HasForeignKey("ChassisUUID")
                        .IsRequired()
                        .HasConstraintName("chassis_motherboardformfactorsupport_chassisuuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.MotherboardFormFactor.MotherboardFormFactor", "MotherboardFormFactor")
                        .WithMany()
                        .HasForeignKey("MotherboardFormFactorUUID")
                        .IsRequired()
                        .HasConstraintName("chassis_motherboardformfactorsupport_motherboardformfactoruuis_fkey");

                    b.Navigation("Chassis");

                    b.Navigation("MotherboardFormFactor");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.ChassisPowerSupplyFormFactorSupport.ChassisPowerSupplyFormFactorSupport", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.Chassis.Chassis", "Chassis")
                        .WithMany("ChassisPowerSupplyFormFactorSupport")
                        .HasForeignKey("ChassisUUID")
                        .IsRequired()
                        .HasConstraintName("chassis_powersupplyformfactorsupport_chassisuuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.PowerSupplyFormFactor.PowerSupplyFormFactor", "PowerSupplyFormFactor")
                        .WithMany()
                        .HasForeignKey("PowerSupplyFormFactorUUID")
                        .IsRequired()
                        .HasConstraintName("chassis_powersupplyformfactorsupport_psuformfactoruuid_fkey");

                    b.Navigation("Chassis");

                    b.Navigation("PowerSupplyFormFactor");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.ChassisRadiatorSupport.ChassisRadiatorSupport", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.Chassis.Chassis", "Chassis")
                        .WithMany("ChassisRadiatorSupport")
                        .HasForeignKey("ChassisUUID")
                        .IsRequired()
                        .HasConstraintName("chassis_radiatorsupport_chassisuuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.ChassisZone.ChassisZone", "ChassisZone")
                        .WithMany()
                        .HasForeignKey("ChassisZoneUUID")
                        .IsRequired()
                        .HasConstraintName("chassis_radiatorsupport_chassiszoneuuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.RadiatorSize.RadiatorSize", "RadiatorSize")
                        .WithMany()
                        .HasForeignKey("RadiatorSizeUUID")
                        .IsRequired()
                        .HasConstraintName("chassis_radiatorsupport_radiatorsizeuuid_fkey");

                    b.Navigation("Chassis");

                    b.Navigation("ChassisZone");

                    b.Navigation("RadiatorSize");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.ChassisUSBPort.ChassisUSBPort", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.Chassis.Chassis", "Chassis")
                        .WithMany("ChassisUSBPort")
                        .HasForeignKey("ChassisUUID")
                        .IsRequired()
                        .HasConstraintName("chassis_usbport_chassisuuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.ChassisZone.ChassisZone", "ChassisZone")
                        .WithMany()
                        .HasForeignKey("ChassisZoneUUID")
                        .IsRequired()
                        .HasConstraintName("chassis_usbport_chassiszoneuuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.USBPort.USBPort", "USBPort")
                        .WithMany()
                        .HasForeignKey("USBPortUUID")
                        .IsRequired()
                        .HasConstraintName("chassis_usbport_usbportuuid_fkey");

                    b.Navigation("Chassis");

                    b.Navigation("ChassisZone");

                    b.Navigation("USBPort");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.MotherboardChipset.MotherboardChipset", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.CPUSocket.CPUSocket", "CPUSocket")
                        .WithMany()
                        .HasForeignKey("CPUSocketUUID")
                        .IsRequired()
                        .HasConstraintName("motherboardchipset_cpusocketuuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.Manufacturer.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerUUID")
                        .IsRequired()
                        .HasConstraintName("motherboardchipset_manufactureruuid_fkey");

                    b.Navigation("CPUSocket");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.Part.Part", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.Manufacturer.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerUUID")
                        .IsRequired()
                        .HasConstraintName("part_manufactureruuid_fkey");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.PCIEConnector.PCIEConnector", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.PCIEGeneration.PCIEGeneration", "PCIEGeneration")
                        .WithMany("PCIEConnectors")
                        .HasForeignKey("PCIEGenerationUUID")
                        .IsRequired()
                        .HasConstraintName("pcieconnector_pciegenerationuuid_fkey");

                    b.Navigation("PCIEGeneration");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.Session.Session", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.Account.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountUUID")
                        .IsRequired()
                        .HasConstraintName("session_accountuuid_fkey");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.Chassis.Chassis", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.Part.Part", "Part")
                        .WithOne()
                        .HasForeignKey("ComputerConfigurator.Api.Chassis.Chassis", "UUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("chassis_uuid_fkey");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.CPU.CPU", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.CPUSocket.CPUSocket", "CPUSocket")
                        .WithMany()
                        .HasForeignKey("CPUSocketUUID")
                        .IsRequired()
                        .HasConstraintName("cpu_cpusocketuuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.Part.Part", "Part")
                        .WithOne()
                        .HasForeignKey("ComputerConfigurator.Api.CPU.CPU", "UUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("cpu_uuid_fkey");

                    b.Navigation("CPUSocket");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.PCIEGeneration.PCIEGeneration", b =>
                {
                    b.Navigation("PCIEConnectors");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.Chassis.Chassis", b =>
                {
                    b.Navigation("ChassisAudioPort");

                    b.Navigation("ChassisFanSupport");

                    b.Navigation("ChassisFilterSupport");

                    b.Navigation("ChassisMotherboardFormFactorSupport");

                    b.Navigation("ChassisPowerSupplyFormFactorSupport");

                    b.Navigation("ChassisRadiatorSupport");

                    b.Navigation("ChassisUSBPort");
                });
#pragma warning restore 612, 618
        }
    }
}
