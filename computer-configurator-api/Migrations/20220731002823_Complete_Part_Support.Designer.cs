// <auto-generated />
using System;
using ComputerConfigurator.Api;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ComputerConfigurator.Api.Migrations
{
    [DbContext(typeof(CCContext))]
    [Migration("20220731002823_Complete_Part_Support")]
    partial class Complete_Part_Support
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ComputerConfigurator.Api.Account.Account", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("salt");

                    b.Property<DateTime>("TimestampCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("timestampcreated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(3)");

                    b.HasKey("UUID")
                        .HasName("account_pkey");

                    b.HasIndex(new[] { "Email" }, "account_email_unique")
                        .IsUnique();

                    b.ToTable("account", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.AudioPort.AudioPort", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("ConnectorSize")
                        .HasColumnType("integer")
                        .HasColumnName("connectorsize");

                    b.Property<int>("PinCount")
                        .HasColumnType("integer")
                        .HasColumnName("pincount");

                    b.HasKey("UUID")
                        .HasName("audioport_pkey");

                    b.HasIndex(new[] { "PinCount", "ConnectorSize" }, "audioport_pincount_connectorsize_unique")
                        .IsUnique();

                    b.ToTable("audioport", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.BenchmarkedResolution.BenchmarkedResolution", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("PixelHeight")
                        .HasColumnType("integer")
                        .HasColumnName("pixelheight");

                    b.Property<int>("PixelWidth")
                        .HasColumnType("integer")
                        .HasColumnName("pixelwidth");

                    b.HasKey("UUID")
                        .HasName("benchmarkedresolution_pkey");

                    b.HasIndex(new[] { "PixelWidth", "PixelHeight" }, "benchmarkedresolution_pixelarea_unique")
                        .IsUnique();

                    b.ToTable("benchmarkedresolution", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.ChassisAudioPort.ChassisAudioPort", b =>
                {
                    b.Property<Guid>("ChassisUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("chassisuuid");

                    b.Property<Guid>("AudioPortUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("audiportuuid");

                    b.Property<Guid>("ChassisZoneUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("chassiszoneuuid");

                    b.HasKey("ChassisUUID", "AudioPortUUID", "ChassisZoneUUID")
                        .HasName("chassis_audioport_pkey");

                    b.HasIndex("AudioPortUUID");

                    b.HasIndex("ChassisZoneUUID");

                    b.ToTable("chassis_audioport", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.ChassisFanSupport.ChassisFanSupport", b =>
                {
                    b.Property<Guid>("ChassisUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("chassisuuid");

                    b.Property<Guid>("FanDiameterUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("fandiameteruuid");

                    b.Property<Guid>("ChassisZoneUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("chassiszoneuuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<int>("MaximumWidthMM")
                        .HasColumnType("integer")
                        .HasColumnName("maximumwidthmm");

                    b.HasKey("ChassisUUID", "FanDiameterUUID", "ChassisZoneUUID")
                        .HasName("chassis_fansupport_pkey");

                    b.HasIndex("ChassisZoneUUID");

                    b.HasIndex("FanDiameterUUID");

                    b.ToTable("chassis_fansupport", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.ChassisFilterSupport.ChassisFilterSupport", b =>
                {
                    b.Property<Guid>("ChassisUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("chassisuuid");

                    b.Property<Guid>("ChassisZoneUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("chassiszoneuuid");

                    b.Property<bool>("Removeable")
                        .HasColumnType("boolean")
                        .HasColumnName("removeable");

                    b.HasKey("ChassisUUID", "ChassisZoneUUID")
                        .HasName("chassis_filtersupport_pkey");

                    b.HasIndex("ChassisZoneUUID");

                    b.ToTable("chassis_filtersupport", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.ChassisMotherboardFormFactorSupport.ChassisMotherboardFormFactorSupport", b =>
                {
                    b.Property<Guid>("ChassisUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("chassisuuid");

                    b.Property<Guid>("MotherboardFormFactorUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("motherboardformfactoruuid");

                    b.HasKey("ChassisUUID", "MotherboardFormFactorUUID")
                        .HasName("chassis_motherboardformfactorsupport_pkey");

                    b.HasIndex("MotherboardFormFactorUUID");

                    b.ToTable("chassis_motherboardformfactorsupport", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.ChassisPowerSupplyFormFactorSupport.ChassisPowerSupplyFormFactorSupport", b =>
                {
                    b.Property<Guid>("ChassisUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("chassisuuid");

                    b.Property<Guid>("PowerSupplyFormFactorUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("powersupplyformfactoruuid");

                    b.Property<bool>("BracketRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("bracketrequired");

                    b.HasKey("ChassisUUID", "PowerSupplyFormFactorUUID")
                        .HasName("chassis_powersupplyformfactorsupport_pkey");

                    b.HasIndex("PowerSupplyFormFactorUUID");

                    b.ToTable("chassis_powersupplyformfactorsupport", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.ChassisRadiatorSupport.ChassisRadiatorSupport", b =>
                {
                    b.Property<Guid>("ChassisUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("chassisuuid");

                    b.Property<Guid>("RadiatorSizeUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("radiatorsizeuuid");

                    b.Property<Guid>("ChassisZoneUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("chassiszoneuuid");

                    b.Property<int>("MaximumWidthMM")
                        .HasColumnType("integer")
                        .HasColumnName("maximumwidthmm");

                    b.HasKey("ChassisUUID", "RadiatorSizeUUID", "ChassisZoneUUID")
                        .HasName("chassis_radiatorsupport_pkey");

                    b.HasIndex("ChassisZoneUUID");

                    b.HasIndex("RadiatorSizeUUID");

                    b.ToTable("chassis_radiatorsupport", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.ChassisUSBPort.ChassisUSBPort", b =>
                {
                    b.Property<Guid>("ChassisUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("chassisuuid");

                    b.Property<Guid>("USBPortUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("usbportuuid");

                    b.Property<Guid>("ChassisZoneUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("chassiszoneuuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.HasKey("ChassisUUID", "USBPortUUID", "ChassisZoneUUID")
                        .HasName("chassis_usbport_pkey");

                    b.HasIndex("ChassisZoneUUID");

                    b.HasIndex("USBPortUUID");

                    b.ToTable("chassis_usbport", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.ChassisZone.ChassisZone", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Zone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("zone");

                    b.HasKey("UUID")
                        .HasName("chassiszone_pkey");

                    b.HasIndex(new[] { "Zone" }, "chassiszone_zone_unique")
                        .IsUnique();

                    b.ToTable("chassiszone", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.CPUCoolerCPUSocketSupport.CPUCoolerCPUSocketSupport", b =>
                {
                    b.Property<Guid>("CPUCoolerUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("cpucooleruuid");

                    b.Property<Guid>("CPUSocketUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("cpusocketuuid");

                    b.HasKey("CPUCoolerUUID", "CPUSocketUUID")
                        .HasName("cpucooler_cpusocket_support_pkey");

                    b.HasIndex("CPUSocketUUID");

                    b.ToTable("cpucooler_cpusocket_support", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.CPUCoolerFan.CPUCoolerFan", b =>
                {
                    b.Property<Guid>("CPUCoolerUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("cpucooleruuid");

                    b.Property<Guid>("FanUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("fanuuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.HasKey("CPUCoolerUUID", "FanUUID")
                        .HasName("cpucooler_fan_pkey");

                    b.HasIndex("FanUUID");

                    b.ToTable("cpucooler_fan", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.CPUSocket.CPUSocket", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("version");

                    b.HasKey("UUID")
                        .HasName("cpusocket_pkey");

                    b.HasIndex(new[] { "Version" }, "cpusocket_version_unique")
                        .IsUnique();

                    b.ToTable("cpusocket", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.DisplayConnector.DisplayConnector", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Interface")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("interface");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("version");

                    b.HasKey("UUID")
                        .HasName("displayconnector_pkey");

                    b.HasIndex(new[] { "Interface", "Version" }, "displayconnector_interface_version_unique")
                        .IsUnique();

                    b.ToTable("displayconnector", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.EightyPlusRating.EightyPlusRating", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("rating");

                    b.HasKey("UUID")
                        .HasName("eightyplusrating_pkey");

                    b.HasIndex(new[] { "Rating" }, "eightyplusrating_rating_unique")
                        .IsUnique();

                    b.ToTable("eightyplusrating", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.EthernetPort.EthernetPort", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("BandwidthMBytes")
                        .HasColumnType("integer")
                        .HasColumnName("bandwidthmbytes");

                    b.Property<string>("Chipset")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("chipset");

                    b.HasKey("UUID")
                        .HasName("ethernetport_pkey");

                    b.HasIndex(new[] { "Chipset" }, "ethernetport_chipset_unique")
                        .IsUnique();

                    b.ToTable("ethernetport", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.FanDiameter.FanDiameter", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("Diameter")
                        .HasColumnType("integer")
                        .HasColumnName("diameter");

                    b.HasKey("UUID")
                        .HasName("fandiameter_pkey");

                    b.HasIndex(new[] { "Diameter" }, "fandiameter_diameter_unique")
                        .IsUnique();

                    b.ToTable("fandiameter", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.FanHeader.FanHeader", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("PinCount")
                        .HasColumnType("integer")
                        .HasColumnName("pincount");

                    b.HasKey("UUID")
                        .HasName("fanheader_pkey");

                    b.HasIndex(new[] { "PinCount" }, "fanheader_pincount_unique")
                        .IsUnique();

                    b.ToTable("fanheader", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.FanVoltage.FanVoltage", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<float>("Voltage")
                        .HasColumnType("real")
                        .HasColumnName("fanvoltage");

                    b.HasKey("UUID")
                        .HasName("fanvoltage_pkey");

                    b.HasIndex(new[] { "Voltage" }, "fanvoltage_voltage_unique")
                        .IsUnique();

                    b.ToTable("fanvoltage", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.GPUDisplayConnector.GPUDisplayConnector", b =>
                {
                    b.Property<Guid>("GPUUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("gpuuuid");

                    b.Property<Guid>("DisplayConnectorUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("displayconnectoruuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.HasKey("GPUUUID", "DisplayConnectorUUID")
                        .HasName("gpu_displayconnector_pkey");

                    b.HasIndex("DisplayConnectorUUID");

                    b.ToTable("gpu_displayconnector", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.Manufacturer.Manufacturer", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("UUID")
                        .HasName("manufacturer_pkey");

                    b.HasIndex(new[] { "Name" }, "manufacturer_name_unique")
                        .IsUnique();

                    b.ToTable("manufacturer", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.MotherboardChipset.MotherboardChipset", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CPUSocketUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("cpusocketuuid");

                    b.Property<Guid>("ManufacturerUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("manufactureruuid");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("version");

                    b.HasKey("UUID")
                        .HasName("motherboardchipset_pkey");

                    b.HasIndex("CPUSocketUUID");

                    b.HasIndex(new[] { "ManufacturerUUID", "Version" }, "motherboardchipset_manufacturer_version_unique")
                        .IsUnique();

                    b.ToTable("motherboardchipset", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.MotherboardDisplayConnector.MotherboardDisplayConnector", b =>
                {
                    b.Property<Guid>("MotherboardUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("motherboarduuid");

                    b.Property<Guid>("DisplayConnectorUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("displayconnectoruuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.HasKey("MotherboardUUID", "DisplayConnectorUUID")
                        .HasName("motherboard_displayconnector_pkey");

                    b.HasIndex("DisplayConnectorUUID");

                    b.ToTable("motherboard_displayconnector", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.MotherboardEthernetPort.MotherboardEthernetPort", b =>
                {
                    b.Property<Guid>("MotherboardUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("motherboarduuid");

                    b.Property<Guid>("EthernetPortUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("ethernetportuuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.HasKey("MotherboardUUID", "EthernetPortUUID")
                        .HasName("motherboard_ethernetport_pkey");

                    b.HasIndex("EthernetPortUUID");

                    b.ToTable("motherboard_ethernetport", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.MotherboardFanHeader.MotherboardFanHeader", b =>
                {
                    b.Property<Guid>("MotherboardUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("motherboarduuid");

                    b.Property<Guid>("FanHeaderUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("fanheaderuuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.HasKey("MotherboardUUID", "FanHeaderUUID")
                        .HasName("motherboard_ethernetport_pkey");

                    b.HasIndex("FanHeaderUUID");

                    b.ToTable("motherboard_fanheader", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.MotherboardFormFactor.MotherboardFormFactor", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("FormFactor")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("formfactor");

                    b.HasKey("UUID")
                        .HasName("motherboardformfactor_pkey");

                    b.HasIndex(new[] { "FormFactor" }, "motherboardformfactor_formfactor_unique")
                        .IsUnique();

                    b.ToTable("motherboardformfactor", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.MotherboardNVMEConnector.MotherboardNVMEConnector", b =>
                {
                    b.Property<Guid>("MotherboardUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("motherboarduuid");

                    b.Property<Guid>("PCIEGenerationUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("pciegenerationuuid");

                    b.Property<Guid>("NVMEInterfaceUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("nvmeinterfaceuuid");

                    b.Property<Guid>("NVMEFormFactorUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("nvmeformfactoruuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.HasKey("MotherboardUUID", "PCIEGenerationUUID", "NVMEInterfaceUUID", "NVMEFormFactorUUID")
                        .HasName("motherboard_nvmeconnector_pkey");

                    b.HasIndex("NVMEFormFactorUUID");

                    b.HasIndex("NVMEInterfaceUUID");

                    b.HasIndex("PCIEGenerationUUID");

                    b.ToTable("motherboard_nvmeconnector", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.MotherboardPCIEConnector.MotherboardPCIEConnector", b =>
                {
                    b.Property<Guid>("MotherboardUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("motherboarduuid");

                    b.Property<Guid>("PCIEConnectorUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("pcieconnectoruuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.HasKey("MotherboardUUID", "PCIEConnectorUUID")
                        .HasName("motherboard_pcieconnector_pkey");

                    b.HasIndex("PCIEConnectorUUID");

                    b.ToTable("motherboard_pcieconnector", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.MotherboardRAMSocket.MotherboardRAMSocket", b =>
                {
                    b.Property<Guid>("MotherboardUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("motherboarduuid");

                    b.Property<Guid>("RAMSocketUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("ramsocketuuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.HasKey("MotherboardUUID", "RAMSocketUUID")
                        .HasName("motherboard_ramsocket_pkey");

                    b.HasIndex("RAMSocketUUID");

                    b.ToTable("motherboard_ramsocket", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.MotherboardRAMSpeed.MotherboardRAMSpeed", b =>
                {
                    b.Property<Guid>("MotherboardUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("motherboarduuid");

                    b.Property<Guid>("RAMSpeedUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("ramspeeduuid");

                    b.Property<bool>("RequiresOverclock")
                        .HasColumnType("boolean")
                        .HasColumnName("requiresoverclock");

                    b.HasKey("MotherboardUUID", "RAMSpeedUUID")
                        .HasName("motherboard_ramspeed_pkey");

                    b.HasIndex("RAMSpeedUUID");

                    b.ToTable("motherboard_ramspeed", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.MotherboardSATAConnector.MotherboardSATAConnector", b =>
                {
                    b.Property<Guid>("MotherboardUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("motherboarduuid");

                    b.Property<Guid>("SATAGenerationUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("satagenerationuuid");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.HasKey("MotherboardUUID", "SATAGenerationUUID")
                        .HasName("motherboard_sataconnector_pkey");

                    b.HasIndex("SATAGenerationUUID");

                    b.ToTable("motherboard_sataconnector", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.MotherboardUSBPort.MotherboardUSBPort", b =>
                {
                    b.Property<Guid>("MotherboardUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("motherboarduuid");

                    b.Property<Guid>("USBPortUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("usbportuuid");

                    b.Property<int>("ExternalCount")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<int>("InternalCount")
                        .HasColumnType("integer");

                    b.HasKey("MotherboardUUID", "USBPortUUID")
                        .HasName("motherboard_usbport_pkey");

                    b.HasIndex("USBPortUUID");

                    b.ToTable("motherboard_usbport", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.MountedStorageFormFactor.MountedStorageFormFactor", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("size");

                    b.HasKey("UUID")
                        .HasName("mountedstorageformfactor_pkey");

                    b.HasIndex(new[] { "Size" }, "mountedstorageformfactor_size_unique")
                        .IsUnique();

                    b.ToTable("mountedstorageformfactor", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.NVMEFormFactor.NVMEFormFactor", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("FormFactor")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("formfactor");

                    b.HasKey("UUID")
                        .HasName("nvmeformfactor_pkey");

                    b.HasIndex(new[] { "FormFactor" }, "nvmeformfactor_formfactor_unique")
                        .IsUnique();

                    b.ToTable("nvmeformfactor", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.NVMEInterface.NVMEInterface", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Interface")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("interface");

                    b.HasKey("UUID")
                        .HasName("nvmeinterface_pkey");

                    b.HasIndex(new[] { "Interface" }, "nvminterface_interface_unique")
                        .IsUnique();

                    b.ToTable("nvmeinterface", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.Part.Part", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("LongDescription")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("longdescription");

                    b.Property<Guid>("ManufacturerUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("manufactureruuid");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("model");

                    b.Property<decimal>("Price")
                        .HasPrecision(7, 2)
                        .HasColumnType("numeric(7,2)")
                        .HasColumnName("price");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("shortdescription");

                    b.HasKey("UUID")
                        .HasName("part_pkey");

                    b.HasIndex(new[] { "ManufacturerUUID", "Model" }, "part_manufacturer_model_unique")
                        .IsUnique();

                    b.ToTable("part", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.PCIEConnector.PCIEConnector", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("LaneCount")
                        .HasColumnType("integer")
                        .HasColumnName("lanecount");

                    b.Property<Guid>("PCIEGenerationUUID")
                        .HasColumnType("uuid");

                    b.HasKey("UUID")
                        .HasName("pcieconnector_pkey");

                    b.HasIndex(new[] { "PCIEGenerationUUID", "LaneCount" }, "pcieconnector_lanecount_unique")
                        .IsUnique();

                    b.ToTable("pcieconnector", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.PCIEGeneration.PCIEGeneration", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Generation")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("generation");

                    b.HasKey("UUID")
                        .HasName("pciegeneration_pkey");

                    b.HasIndex(new[] { "Generation" }, "pciegeneration_generation_unique")
                        .IsUnique();

                    b.ToTable("pciegeneration", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.PowerSupplyFormFactor.PowerSupplyFormFactor", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("FormFactor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("formfactor");

                    b.HasKey("UUID")
                        .HasName("powersupplyformfactor_pkey");

                    b.HasIndex(new[] { "FormFactor" }, "powersupplyformfactor_formfactor_unique")
                        .IsUnique();

                    b.ToTable("powersupplyformfactor", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.RadiatorSize.RadiatorSize", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("Size")
                        .HasColumnType("integer")
                        .HasColumnName("size");

                    b.HasKey("UUID")
                        .HasName("radiatorsize_pkey");

                    b.HasIndex(new[] { "Size" }, "radiatorsize_size_unique")
                        .IsUnique();

                    b.ToTable("radiatorsize", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.RAIDMode.RAIDMode", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Mode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("mode");

                    b.HasKey("UUID")
                        .HasName("raidmode_pkey");

                    b.HasIndex(new[] { "Mode" }, "raidmode_mode_unique")
                        .IsUnique();

                    b.ToTable("raidmode", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.RAMSocket.RAMSocket", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("version");

                    b.HasKey("UUID")
                        .HasName("ramsocket_pkey");

                    b.HasIndex(new[] { "Version" }, "ramsocket_version_unique")
                        .IsUnique();

                    b.ToTable("ramsocket", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.RAMSpeed.RAMSpeed", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("ClockRate")
                        .HasColumnType("integer")
                        .HasColumnName("clockrate");

                    b.HasKey("UUID")
                        .HasName("ramspeed_pkey");

                    b.HasIndex(new[] { "ClockRate" }, "ramspeed_clockrate_unique")
                        .IsUnique();

                    b.ToTable("ramspeed", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.SATAGeneration.SATAGeneration", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Generation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("generation");

                    b.HasKey("UUID")
                        .HasName("satageneration_pkey");

                    b.HasIndex(new[] { "Generation" }, "satageneration_generation_unique")
                        .IsUnique();

                    b.ToTable("satageneration", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.Session.Session", b =>
                {
                    b.Property<Guid>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("key")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("AccountUUID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LoginTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasColumnName("logintimestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP(3)");

                    b.Property<DateTime?>("LogoutTimestamp")
                        .HasColumnType("timestamptz")
                        .HasColumnName("logouttimestamp");

                    b.HasKey("Key")
                        .HasName("session_pkey");

                    b.HasIndex("AccountUUID");

                    b.ToTable("session", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.USBPort.USBPort", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Interface")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("interface");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("version");

                    b.HasKey("UUID")
                        .HasName("usbport_pkey");

                    b.HasIndex(new[] { "Interface", "Version" }, "usbport_interface_version_unique")
                        .IsUnique();

                    b.ToTable("usbport", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.Chassis.Chassis", b =>
                {
                    b.HasBaseType("ComputerConfigurator.Api.Part.Part");

                    b.Property<int>("HeightMM")
                        .HasColumnType("integer")
                        .HasColumnName("heightmm");

                    b.Property<int>("LengthMM")
                        .HasColumnType("integer")
                        .HasColumnName("lengthmm");

                    b.Property<int>("MaxCPUCoolerHeightMM")
                        .HasColumnType("integer")
                        .HasColumnName("maxcpucoolerheightmm");

                    b.Property<int>("MaxGPULengthMM")
                        .HasColumnType("integer")
                        .HasColumnName("maxgpulengthmm");

                    b.Property<int>("MaxPSULengthMM")
                        .HasColumnType("integer")
                        .HasColumnName("maxpsulengthmm");

                    b.Property<int>("PCIESlotCount")
                        .HasColumnType("integer")
                        .HasColumnName("pcieslotcount");

                    b.Property<int>("WidthMM")
                        .HasColumnType("integer")
                        .HasColumnName("widthmm");

                    b.ToTable("chassis", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.CPU.CPU", b =>
                {
                    b.HasBaseType("ComputerConfigurator.Api.Part.Part");

                    b.Property<int>("BaseClockSpeed")
                        .HasColumnType("integer")
                        .HasColumnName("baseclockspeed");

                    b.Property<int?>("BoostClockSpeed")
                        .HasColumnType("integer")
                        .HasColumnName("boostclockspeed");

                    b.Property<Guid>("CPUSocketUUID")
                        .HasColumnType("uuid");

                    b.Property<int>("CoreCount")
                        .HasColumnType("integer")
                        .HasColumnName("corecount");

                    b.Property<int>("ThreadCount")
                        .HasColumnType("integer")
                        .HasColumnName("threadcount");

                    b.HasIndex("CPUSocketUUID");

                    b.ToTable("cpu", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.CPUCooler.CPUCooler", b =>
                {
                    b.HasBaseType("ComputerConfigurator.Api.Part.Part");

                    b.Property<int>("TDPRating")
                        .HasColumnType("integer")
                        .HasColumnName("tdprating");

                    b.ToTable("cpucooler", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.Fan.Fan", b =>
                {
                    b.HasBaseType("ComputerConfigurator.Api.Part.Part");

                    b.Property<Guid>("FanDiameterUUID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FanVoltageUUID")
                        .HasColumnType("uuid");

                    b.Property<int>("MTBFHours")
                        .HasColumnType("integer")
                        .HasColumnName("mtbfhours");

                    b.Property<float>("MaxAcousticOutput")
                        .HasColumnType("real")
                        .HasColumnName("maxacousticoutput");

                    b.Property<float>("MaxAirflow")
                        .HasColumnType("real")
                        .HasColumnName("maxairflow");

                    b.Property<float>("MaxCurrent")
                        .HasColumnType("real")
                        .HasColumnName("maxcurrent");

                    b.Property<int>("MaxRPM")
                        .HasColumnType("integer")
                        .HasColumnName("maxrpm");

                    b.Property<float>("MaxStaticPressure")
                        .HasColumnType("real")
                        .HasColumnName("maxstaticpressure");

                    b.Property<float>("MinAcousticOutput")
                        .HasColumnType("real")
                        .HasColumnName("minacousticoutput");

                    b.Property<float>("MinAirflow")
                        .HasColumnType("real")
                        .HasColumnName("minairflow");

                    b.Property<int>("MinRPM")
                        .HasColumnType("integer")
                        .HasColumnName("minrpm");

                    b.Property<float>("MinStaticPressure")
                        .HasColumnType("real")
                        .HasColumnName("minstaticpressure");

                    b.Property<bool>("PWMSupport")
                        .HasColumnType("boolean");

                    b.Property<int>("WidthMM")
                        .HasColumnType("integer")
                        .HasColumnName("widthmm");

                    b.HasIndex("FanDiameterUUID");

                    b.HasIndex("FanVoltageUUID");

                    b.ToTable("fan", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.GPU.GPU", b =>
                {
                    b.HasBaseType("ComputerConfigurator.Api.Part.Part");

                    b.Property<int>("BaseClockSpeed")
                        .HasColumnType("integer")
                        .HasColumnName("baseclockspeed");

                    b.Property<int?>("BoostClockSpeed")
                        .HasColumnType("integer")
                        .HasColumnName("boostclockspeed");

                    b.Property<int>("HeightMM")
                        .HasColumnType("integer")
                        .HasColumnName("heightmm");

                    b.Property<int>("LengthMM")
                        .HasColumnType("integer")
                        .HasColumnName("lengthmm");

                    b.Property<int>("MaxDisplayCount")
                        .HasColumnType("integer")
                        .HasColumnName("maxdisplaycount");

                    b.Property<Guid>("PCIEConnectorUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("pcieconnectoruuid");

                    b.Property<float>("SlotWidth")
                        .HasColumnType("real")
                        .HasColumnName("slotwidth");

                    b.Property<int>("VRAMMBytes")
                        .HasColumnType("integer")
                        .HasColumnName("vrammbytes");

                    b.Property<int>("WidthMM")
                        .HasColumnType("integer")
                        .HasColumnName("widthmm");

                    b.HasIndex("PCIEConnectorUUID");

                    b.ToTable("gpu", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.Motherboard.Motherboard", b =>
                {
                    b.HasBaseType("ComputerConfigurator.Api.Part.Part");

                    b.Property<int>("CPUSocketCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("CPUSocketUUID")
                        .HasColumnType("uuid");

                    b.Property<int>("MaxRAMCapacityMByte")
                        .HasColumnType("integer");

                    b.Property<Guid>("MotherboardChipsetUUID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MotherboardFormFactorUUID")
                        .HasColumnType("uuid");

                    b.Property<bool>("WifiSupport")
                        .HasColumnType("boolean");

                    b.HasIndex("CPUSocketUUID");

                    b.HasIndex("MotherboardChipsetUUID");

                    b.HasIndex("MotherboardFormFactorUUID");

                    b.ToTable("motherboard", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.PowerSupply.PowerSupply", b =>
                {
                    b.HasBaseType("ComputerConfigurator.Api.Part.Part");

                    b.Property<Guid>("EightyPlusRatingUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("eightyplusratinguuid");

                    b.Property<int>("LengthMM")
                        .HasColumnType("integer")
                        .HasColumnName("lengthmm");

                    b.Property<int?>("MTBF")
                        .HasColumnType("integer")
                        .HasColumnName("mtbf");

                    b.Property<int>("MaximumOutputWatts")
                        .HasColumnType("integer")
                        .HasColumnName("maximumoutputwatts");

                    b.Property<bool>("ModularCables")
                        .HasColumnType("boolean")
                        .HasColumnName("modularcables");

                    b.Property<Guid>("PowerSupplyFormFactorUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("powersupplyformfactoruuid");

                    b.HasIndex("EightyPlusRatingUUID");

                    b.HasIndex("PowerSupplyFormFactorUUID");

                    b.ToTable("powersupply", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.Radiator.Radiator", b =>
                {
                    b.HasBaseType("ComputerConfigurator.Api.Part.Part");

                    b.Property<Guid>("RadiatorSizeUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("radiatorsizeuuid");

                    b.Property<float>("TubeInnerDiameterMM")
                        .HasColumnType("real")
                        .HasColumnName("tubeinnerdiametermm");

                    b.Property<float>("TubeOuterDiameterMM")
                        .HasColumnType("real")
                        .HasColumnName("tubeouterdiametermm");

                    b.Property<int>("WidthMM")
                        .HasColumnType("integer")
                        .HasColumnName("widthmm");

                    b.HasIndex("RadiatorSizeUUID");

                    b.ToTable("radiator", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.RAM.RAM", b =>
                {
                    b.HasBaseType("ComputerConfigurator.Api.Part.Part");

                    b.Property<int>("CAS")
                        .HasColumnType("integer")
                        .HasColumnName("cas");

                    b.Property<int>("DIMMCount")
                        .HasColumnType("integer")
                        .HasColumnName("dimmcount");

                    b.Property<int>("ModuleCapacityGBytes")
                        .HasColumnType("integer")
                        .HasColumnName("modulecapacitygbytes");

                    b.Property<Guid>("RAMSocketUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("ramsocketuuid");

                    b.Property<Guid>("RAMSpeedUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("ramspeeduuid");

                    b.Property<int>("TRAS")
                        .HasColumnType("integer")
                        .HasColumnName("tras");

                    b.Property<int>("TRCD")
                        .HasColumnType("integer")
                        .HasColumnName("trcd");

                    b.Property<int>("TRP")
                        .HasColumnType("integer")
                        .HasColumnName("trp");

                    b.HasIndex("RAMSocketUUID");

                    b.HasIndex("RAMSpeedUUID");

                    b.ToTable("ram", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.Storage.Storage", b =>
                {
                    b.HasBaseType("ComputerConfigurator.Api.Part.Part");

                    b.Property<int?>("CacheSizeMBytes")
                        .HasColumnType("integer")
                        .HasColumnName("cachesizembytes");

                    b.Property<int>("CapacityGBytes")
                        .HasColumnType("integer")
                        .HasColumnName("capacitygbytes");

                    b.Property<int?>("MTBF")
                        .HasColumnType("integer")
                        .HasColumnName("mtbf");

                    b.Property<int?>("MaxTBW")
                        .HasColumnType("integer")
                        .HasColumnName("maxtbw");

                    b.Property<int>("ReadBandwidth")
                        .HasColumnType("integer")
                        .HasColumnName("readbandwidth");

                    b.Property<int?>("ReadIOPS")
                        .HasColumnType("integer")
                        .HasColumnName("readiops");

                    b.Property<int>("WriteBandwidth")
                        .HasColumnType("integer")
                        .HasColumnName("writebandwidth");

                    b.Property<int?>("WriteIOPS")
                        .HasColumnType("integer")
                        .HasColumnName("writeiops");

                    b.ToTable("storage", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.CPUClosedLoopCooler.CPUClosedLoopCooler", b =>
                {
                    b.HasBaseType("ComputerConfigurator.Api.CPUCooler.CPUCooler");

                    b.Property<Guid>("RadiatorSizeUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("radiatorsizeuuid");

                    b.HasIndex("RadiatorSizeUUID");

                    b.ToTable("cpuclosedloopcooler", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.CPUHeatsink.CPUHeatsink", b =>
                {
                    b.HasBaseType("ComputerConfigurator.Api.CPUCooler.CPUCooler");

                    b.Property<int>("HeightMM")
                        .HasColumnType("integer")
                        .HasColumnName("heightmm");

                    b.ToTable("cpuheatsink", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.NVMESSD.NVMESSD", b =>
                {
                    b.HasBaseType("ComputerConfigurator.Api.Storage.Storage");

                    b.Property<Guid>("NVMEFormFactorUUID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("NVMEInterfaceUUID")
                        .HasColumnType("uuid");

                    b.HasIndex("NVMEFormFactorUUID");

                    b.HasIndex("NVMEInterfaceUUID");

                    b.ToTable("nvmessd", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.SATAHDD.SATAHDD", b =>
                {
                    b.HasBaseType("ComputerConfigurator.Api.Storage.Storage");

                    b.Property<Guid>("MountedStorageFormFactorUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("mountedstorageformfactoruuid");

                    b.Property<int>("SpindleRPM")
                        .HasColumnType("integer")
                        .HasColumnName("spindlerpm");

                    b.HasIndex("MountedStorageFormFactorUUID");

                    b.ToTable("satahdd", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.SATASSD.SATASSD", b =>
                {
                    b.HasBaseType("ComputerConfigurator.Api.Storage.Storage");

                    b.Property<Guid>("MountedStorageFormFactorUUID")
                        .HasColumnType("uuid")
                        .HasColumnName("mountedstorageformfactoruuid");

                    b.HasIndex("MountedStorageFormFactorUUID");

                    b.ToTable("satassd", (string)null);
                });

            modelBuilder.Entity("ComputerConfigurator.Api.ChassisAudioPort.ChassisAudioPort", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.AudioPort.AudioPort", "AudioPort")
                        .WithMany()
                        .HasForeignKey("AudioPortUUID")
                        .IsRequired()
                        .HasConstraintName("chassis_audioport_audioportuuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.Chassis.Chassis", "Chassis")
                        .WithMany("AudioPorts")
                        .HasForeignKey("ChassisUUID")
                        .IsRequired()
                        .HasConstraintName("chassis_audioport_chassisuuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.ChassisZone.ChassisZone", "ChassisZone")
                        .WithMany()
                        .HasForeignKey("ChassisZoneUUID")
                        .IsRequired()
                        .HasConstraintName("chassis_audioport_chassiszoneuuid_fkey");

                    b.Navigation("AudioPort");

                    b.Navigation("Chassis");

                    b.Navigation("ChassisZone");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.ChassisFanSupport.ChassisFanSupport", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.Chassis.Chassis", "Chassis")
                        .WithMany("FanSupport")
                        .HasForeignKey("ChassisUUID")
                        .IsRequired()
                        .HasConstraintName("chassis_fansupport_chassisuuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.ChassisZone.ChassisZone", "ChassisZone")
                        .WithMany()
                        .HasForeignKey("ChassisZoneUUID")
                        .IsRequired()
                        .HasConstraintName("chassis_fansupport_chassiszoneuuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.FanDiameter.FanDiameter", "FanDiameter")
                        .WithMany()
                        .HasForeignKey("FanDiameterUUID")
                        .IsRequired()
                        .HasConstraintName("chassis_fansupport_fandiameteruuid_fkey");

                    b.Navigation("Chassis");

                    b.Navigation("ChassisZone");

                    b.Navigation("FanDiameter");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.ChassisFilterSupport.ChassisFilterSupport", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.Chassis.Chassis", "Chassis")
                        .WithMany("FilterSupport")
                        .HasForeignKey("ChassisUUID")
                        .IsRequired()
                        .HasConstraintName("chassis_filtersupport_chassisuuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.ChassisZone.ChassisZone", "ChassisZone")
                        .WithMany()
                        .HasForeignKey("ChassisZoneUUID")
                        .IsRequired()
                        .HasConstraintName("chassis_filtersupport_chassiszoneuuid_fkey");

                    b.Navigation("Chassis");

                    b.Navigation("ChassisZone");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.ChassisMotherboardFormFactorSupport.ChassisMotherboardFormFactorSupport", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.Chassis.Chassis", "Chassis")
                        .WithMany("MotherboardFormFactorSupport")
                        .HasForeignKey("ChassisUUID")
                        .IsRequired()
                        .HasConstraintName("chassis_motherboardformfactorsupport_chassisuuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.MotherboardFormFactor.MotherboardFormFactor", "MotherboardFormFactor")
                        .WithMany()
                        .HasForeignKey("MotherboardFormFactorUUID")
                        .IsRequired()
                        .HasConstraintName("chassis_motherboardformfactorsupport_motherboardformfactoruuid_fkey");

                    b.Navigation("Chassis");

                    b.Navigation("MotherboardFormFactor");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.ChassisPowerSupplyFormFactorSupport.ChassisPowerSupplyFormFactorSupport", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.Chassis.Chassis", "Chassis")
                        .WithMany("PowerSupplyFormFactorSupport")
                        .HasForeignKey("ChassisUUID")
                        .IsRequired()
                        .HasConstraintName("chassis_powersupplyformfactorsupport_chassisuuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.PowerSupplyFormFactor.PowerSupplyFormFactor", "PowerSupplyFormFactor")
                        .WithMany()
                        .HasForeignKey("PowerSupplyFormFactorUUID")
                        .IsRequired()
                        .HasConstraintName("chassis_powersupplyformfactorsupport_psuformfactoruuid_fkey");

                    b.Navigation("Chassis");

                    b.Navigation("PowerSupplyFormFactor");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.ChassisRadiatorSupport.ChassisRadiatorSupport", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.Chassis.Chassis", "Chassis")
                        .WithMany("RadiatorSupport")
                        .HasForeignKey("ChassisUUID")
                        .IsRequired()
                        .HasConstraintName("chassis_radiatorsupport_chassisuuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.ChassisZone.ChassisZone", "ChassisZone")
                        .WithMany()
                        .HasForeignKey("ChassisZoneUUID")
                        .IsRequired()
                        .HasConstraintName("chassis_radiatorsupport_chassiszoneuuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.RadiatorSize.RadiatorSize", "RadiatorSize")
                        .WithMany()
                        .HasForeignKey("RadiatorSizeUUID")
                        .IsRequired()
                        .HasConstraintName("chassis_radiatorsupport_radiatorsizeuuid_fkey");

                    b.Navigation("Chassis");

                    b.Navigation("ChassisZone");

                    b.Navigation("RadiatorSize");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.ChassisUSBPort.ChassisUSBPort", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.Chassis.Chassis", "Chassis")
                        .WithMany("USBPorts")
                        .HasForeignKey("ChassisUUID")
                        .IsRequired()
                        .HasConstraintName("chassis_usbport_chassisuuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.ChassisZone.ChassisZone", "ChassisZone")
                        .WithMany()
                        .HasForeignKey("ChassisZoneUUID")
                        .IsRequired()
                        .HasConstraintName("chassis_usbport_chassiszoneuuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.USBPort.USBPort", "USBPort")
                        .WithMany()
                        .HasForeignKey("USBPortUUID")
                        .IsRequired()
                        .HasConstraintName("chassis_usbport_usbportuuid_fkey");

                    b.Navigation("Chassis");

                    b.Navigation("ChassisZone");

                    b.Navigation("USBPort");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.CPUCoolerCPUSocketSupport.CPUCoolerCPUSocketSupport", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.CPUCooler.CPUCooler", "CPUCooler")
                        .WithMany("CPUSockets")
                        .HasForeignKey("CPUCoolerUUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("cpucooler_cpusocket_cpucooleruuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.CPUSocket.CPUSocket", "CPUSocket")
                        .WithMany()
                        .HasForeignKey("CPUSocketUUID")
                        .IsRequired()
                        .HasConstraintName("cpucooler_cpusocket_cpusocketuuid_fkey");

                    b.Navigation("CPUCooler");

                    b.Navigation("CPUSocket");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.CPUCoolerFan.CPUCoolerFan", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.CPUCooler.CPUCooler", "CPUCooler")
                        .WithMany("CPUCoolerFans")
                        .HasForeignKey("CPUCoolerUUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("cpucooler_fan_cpucooleruuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.Fan.Fan", "Fan")
                        .WithMany()
                        .HasForeignKey("FanUUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("cpucooler_fan_fanuuid_fkey");

                    b.Navigation("CPUCooler");

                    b.Navigation("Fan");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.GPUDisplayConnector.GPUDisplayConnector", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.DisplayConnector.DisplayConnector", "DisplayConnector")
                        .WithMany()
                        .HasForeignKey("DisplayConnectorUUID")
                        .IsRequired()
                        .HasConstraintName("gpu_displayconnector_displayconnectoruuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.GPU.GPU", "GPU")
                        .WithMany("DisplayConnectors")
                        .HasForeignKey("GPUUUID")
                        .IsRequired()
                        .HasConstraintName("gpu_displayconnector_gpuuuid_fkey");

                    b.Navigation("DisplayConnector");

                    b.Navigation("GPU");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.MotherboardChipset.MotherboardChipset", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.CPUSocket.CPUSocket", "CPUSocket")
                        .WithMany()
                        .HasForeignKey("CPUSocketUUID")
                        .IsRequired()
                        .HasConstraintName("motherboardchipset_cpusocketuuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.Manufacturer.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerUUID")
                        .IsRequired()
                        .HasConstraintName("motherboardchipset_manufactureruuid_fkey");

                    b.Navigation("CPUSocket");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.MotherboardDisplayConnector.MotherboardDisplayConnector", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.DisplayConnector.DisplayConnector", "DisplayConnector")
                        .WithMany()
                        .HasForeignKey("DisplayConnectorUUID")
                        .IsRequired()
                        .HasConstraintName("motherboard_displayconnector_displayconnectoruuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.Motherboard.Motherboard", "Motherboard")
                        .WithMany("DisplayConnectors")
                        .HasForeignKey("MotherboardUUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("motherboard_displayconnector_motherboarduuid_fkey");

                    b.Navigation("DisplayConnector");

                    b.Navigation("Motherboard");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.MotherboardEthernetPort.MotherboardEthernetPort", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.EthernetPort.EthernetPort", "EthernetPort")
                        .WithMany()
                        .HasForeignKey("EthernetPortUUID")
                        .IsRequired()
                        .HasConstraintName("motherboard_ethernetport_ethernetportuuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.Motherboard.Motherboard", "Motherboard")
                        .WithMany("EthernetPorts")
                        .HasForeignKey("MotherboardUUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("motherboard_ethernetport_motherboarduuid_fkey");

                    b.Navigation("EthernetPort");

                    b.Navigation("Motherboard");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.MotherboardFanHeader.MotherboardFanHeader", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.FanHeader.FanHeader", "FanHeader")
                        .WithMany()
                        .HasForeignKey("FanHeaderUUID")
                        .IsRequired()
                        .HasConstraintName("motherboard_fanheader_fanheaderuuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.Motherboard.Motherboard", "Motherboard")
                        .WithMany("FanHeaders")
                        .HasForeignKey("MotherboardUUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("motherboard_fanheader_motherboarduuid_fkey");

                    b.Navigation("FanHeader");

                    b.Navigation("Motherboard");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.MotherboardNVMEConnector.MotherboardNVMEConnector", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.Motherboard.Motherboard", "Motherboard")
                        .WithMany("NVMEConnectors")
                        .HasForeignKey("MotherboardUUID")
                        .IsRequired()
                        .HasConstraintName("motherboard_nvmeconnector_motherboarduuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.NVMEFormFactor.NVMEFormFactor", "NVMEFormFactor")
                        .WithMany()
                        .HasForeignKey("NVMEFormFactorUUID")
                        .IsRequired()
                        .HasConstraintName("motherboard_nvmeconnector_nvmeformfactoruuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.NVMEInterface.NVMEInterface", "NVMEInterface")
                        .WithMany()
                        .HasForeignKey("NVMEInterfaceUUID")
                        .IsRequired()
                        .HasConstraintName("motherboard_nvmeconnector_nvmeinterfaceuuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.PCIEGeneration.PCIEGeneration", "PCIEGeneration")
                        .WithMany()
                        .HasForeignKey("PCIEGenerationUUID")
                        .IsRequired()
                        .HasConstraintName("motherboard_nvmeconnector_pciegenerationuuid_fkey");

                    b.Navigation("Motherboard");

                    b.Navigation("NVMEFormFactor");

                    b.Navigation("NVMEInterface");

                    b.Navigation("PCIEGeneration");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.MotherboardPCIEConnector.MotherboardPCIEConnector", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.Motherboard.Motherboard", "Motherboard")
                        .WithMany("PCIEConnectors")
                        .HasForeignKey("MotherboardUUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("motherboard_pcieconnector_motherboarduuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.PCIEConnector.PCIEConnector", "PCIEConnector")
                        .WithMany()
                        .HasForeignKey("PCIEConnectorUUID")
                        .IsRequired()
                        .HasConstraintName("motherboard_pcieconnector_pcieconnectoruuid_fkey");

                    b.Navigation("Motherboard");

                    b.Navigation("PCIEConnector");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.MotherboardRAMSocket.MotherboardRAMSocket", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.Motherboard.Motherboard", "Motherboard")
                        .WithMany("RAMSockets")
                        .HasForeignKey("MotherboardUUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("motherboard_ramsocket_motherboarduuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.RAMSocket.RAMSocket", "RAMSocket")
                        .WithMany()
                        .HasForeignKey("RAMSocketUUID")
                        .IsRequired()
                        .HasConstraintName("motherboard_ramsocket_ramsocketuuid_fkey");

                    b.Navigation("Motherboard");

                    b.Navigation("RAMSocket");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.MotherboardRAMSpeed.MotherboardRAMSpeed", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.Motherboard.Motherboard", "Motherboard")
                        .WithMany("SupportedRAMSpeeds")
                        .HasForeignKey("MotherboardUUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("motherboard_ramspeed_motherboarduuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.RAMSpeed.RAMSpeed", "RAMSpeed")
                        .WithMany()
                        .HasForeignKey("RAMSpeedUUID")
                        .IsRequired()
                        .HasConstraintName("motherboard_ramspeed_ramspeeduuid_fkey");

                    b.Navigation("Motherboard");

                    b.Navigation("RAMSpeed");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.MotherboardSATAConnector.MotherboardSATAConnector", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.Motherboard.Motherboard", "Motherboard")
                        .WithMany("SATAConnectors")
                        .HasForeignKey("MotherboardUUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("motherboard_sataconnector_motherboarduuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.SATAGeneration.SATAGeneration", "SATAGeneration")
                        .WithMany()
                        .HasForeignKey("SATAGenerationUUID")
                        .IsRequired()
                        .HasConstraintName("motherboard_sataconnector_satagenerationuuid_fkey");

                    b.Navigation("Motherboard");

                    b.Navigation("SATAGeneration");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.MotherboardUSBPort.MotherboardUSBPort", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.Motherboard.Motherboard", "Motherboard")
                        .WithMany("USBPorts")
                        .HasForeignKey("MotherboardUUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("motherboard_usbport_motherboarduuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.USBPort.USBPort", "USBPort")
                        .WithMany()
                        .HasForeignKey("USBPortUUID")
                        .IsRequired()
                        .HasConstraintName("motherboard_usbport_usbportuuid_fkey");

                    b.Navigation("Motherboard");

                    b.Navigation("USBPort");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.Part.Part", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.Manufacturer.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerUUID")
                        .IsRequired()
                        .HasConstraintName("part_manufactureruuid_fkey");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.PCIEConnector.PCIEConnector", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.PCIEGeneration.PCIEGeneration", "PCIEGeneration")
                        .WithMany("PCIEConnectors")
                        .HasForeignKey("PCIEGenerationUUID")
                        .IsRequired()
                        .HasConstraintName("pcieconnector_pciegenerationuuid_fkey");

                    b.Navigation("PCIEGeneration");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.Session.Session", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.Account.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountUUID")
                        .IsRequired()
                        .HasConstraintName("session_accountuuid_fkey");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.Chassis.Chassis", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.Part.Part", "Part")
                        .WithOne()
                        .HasForeignKey("ComputerConfigurator.Api.Chassis.Chassis", "UUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("chassis_uuid_fkey");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.CPU.CPU", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.CPUSocket.CPUSocket", "CPUSocket")
                        .WithMany()
                        .HasForeignKey("CPUSocketUUID")
                        .IsRequired()
                        .HasConstraintName("cpu_cpusocketuuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.Part.Part", "Part")
                        .WithOne()
                        .HasForeignKey("ComputerConfigurator.Api.CPU.CPU", "UUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("cpu_uuid_fkey");

                    b.Navigation("CPUSocket");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.CPUCooler.CPUCooler", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.Part.Part", "Part")
                        .WithOne()
                        .HasForeignKey("ComputerConfigurator.Api.CPUCooler.CPUCooler", "UUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("cpucooler_uuid_fkey");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.Fan.Fan", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.FanDiameter.FanDiameter", "FanDiameter")
                        .WithMany()
                        .HasForeignKey("FanDiameterUUID")
                        .IsRequired()
                        .HasConstraintName("fan_fandiameteruuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.FanVoltage.FanVoltage", "FanVoltage")
                        .WithMany()
                        .HasForeignKey("FanVoltageUUID")
                        .IsRequired()
                        .HasConstraintName("fan_fanvoltageuuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.Part.Part", "Part")
                        .WithOne()
                        .HasForeignKey("ComputerConfigurator.Api.Fan.Fan", "UUID")
                        .IsRequired()
                        .HasConstraintName("fan_uuid_fkey");

                    b.Navigation("FanDiameter");

                    b.Navigation("FanVoltage");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.GPU.GPU", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.PCIEConnector.PCIEConnector", "PCIEConnector")
                        .WithMany()
                        .HasForeignKey("PCIEConnectorUUID")
                        .IsRequired()
                        .HasConstraintName("gpu_pcieconnectoruuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.Part.Part", "Part")
                        .WithOne()
                        .HasForeignKey("ComputerConfigurator.Api.GPU.GPU", "UUID")
                        .IsRequired()
                        .HasConstraintName("gpu_uuid_fkey");

                    b.Navigation("PCIEConnector");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.Motherboard.Motherboard", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.CPUSocket.CPUSocket", "CPUSocket")
                        .WithMany()
                        .HasForeignKey("CPUSocketUUID")
                        .IsRequired()
                        .HasConstraintName("motherboard_cpusocketuuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.MotherboardChipset.MotherboardChipset", "MotherboardChipset")
                        .WithMany()
                        .HasForeignKey("MotherboardChipsetUUID")
                        .IsRequired()
                        .HasConstraintName("motherboard_motherboardchipsetuuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.MotherboardFormFactor.MotherboardFormFactor", "MotherboardFormFactor")
                        .WithMany()
                        .HasForeignKey("MotherboardFormFactorUUID")
                        .IsRequired()
                        .HasConstraintName("motherboard_motherboardformfactoruuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.Part.Part", "Part")
                        .WithOne()
                        .HasForeignKey("ComputerConfigurator.Api.Motherboard.Motherboard", "UUID")
                        .IsRequired()
                        .HasConstraintName("motherboard_uuid_fkey");

                    b.Navigation("CPUSocket");

                    b.Navigation("MotherboardChipset");

                    b.Navigation("MotherboardFormFactor");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.PowerSupply.PowerSupply", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.EightyPlusRating.EightyPlusRating", "EightyPlusRating")
                        .WithMany()
                        .HasForeignKey("EightyPlusRatingUUID")
                        .IsRequired()
                        .HasConstraintName("powersupply_eightyplusratinguuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.PowerSupplyFormFactor.PowerSupplyFormFactor", "PowerSupplyFormFactor")
                        .WithMany()
                        .HasForeignKey("PowerSupplyFormFactorUUID")
                        .IsRequired()
                        .HasConstraintName("powersupply_powersupplyformfactoruuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.Part.Part", "Part")
                        .WithOne()
                        .HasForeignKey("ComputerConfigurator.Api.PowerSupply.PowerSupply", "UUID")
                        .IsRequired()
                        .HasConstraintName("powersupply_uuid_fkey");

                    b.Navigation("EightyPlusRating");

                    b.Navigation("Part");

                    b.Navigation("PowerSupplyFormFactor");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.Radiator.Radiator", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.RadiatorSize.RadiatorSize", "RadiatorSize")
                        .WithMany()
                        .HasForeignKey("RadiatorSizeUUID")
                        .IsRequired()
                        .HasConstraintName("radiator_radiatorsizeuuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.Part.Part", "Part")
                        .WithOne()
                        .HasForeignKey("ComputerConfigurator.Api.Radiator.Radiator", "UUID")
                        .IsRequired()
                        .HasConstraintName("radiator_uuid_fkey");

                    b.Navigation("Part");

                    b.Navigation("RadiatorSize");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.RAM.RAM", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.RAMSocket.RAMSocket", "RAMSocket")
                        .WithMany()
                        .HasForeignKey("RAMSocketUUID")
                        .IsRequired()
                        .HasConstraintName("ram_ramsocketuuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.RAMSpeed.RAMSpeed", "RAMSpeed")
                        .WithMany()
                        .HasForeignKey("RAMSpeedUUID")
                        .IsRequired()
                        .HasConstraintName("ram_ramspeeduuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.Part.Part", "Part")
                        .WithOne()
                        .HasForeignKey("ComputerConfigurator.Api.RAM.RAM", "UUID")
                        .IsRequired()
                        .HasConstraintName("ram_uuid_fkey");

                    b.Navigation("Part");

                    b.Navigation("RAMSocket");

                    b.Navigation("RAMSpeed");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.Storage.Storage", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.Part.Part", "Part")
                        .WithOne()
                        .HasForeignKey("ComputerConfigurator.Api.Storage.Storage", "UUID")
                        .IsRequired()
                        .HasConstraintName("storage_uuid_fkey");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.CPUClosedLoopCooler.CPUClosedLoopCooler", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.RadiatorSize.RadiatorSize", "RadiatorSize")
                        .WithMany()
                        .HasForeignKey("RadiatorSizeUUID")
                        .IsRequired()
                        .HasConstraintName("cpuclosedloopcooler_radiatorsizeuuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.CPUCooler.CPUCooler", "CPUCooler")
                        .WithOne()
                        .HasForeignKey("ComputerConfigurator.Api.CPUClosedLoopCooler.CPUClosedLoopCooler", "UUID")
                        .IsRequired()
                        .HasConstraintName("cpuclosedloopcooler_uuid_fkey");

                    b.Navigation("CPUCooler");

                    b.Navigation("RadiatorSize");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.CPUHeatsink.CPUHeatsink", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.CPUCooler.CPUCooler", "CPUCooler")
                        .WithOne()
                        .HasForeignKey("ComputerConfigurator.Api.CPUHeatsink.CPUHeatsink", "UUID")
                        .IsRequired()
                        .HasConstraintName("cpuheatsink_uuid_fkey");

                    b.Navigation("CPUCooler");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.NVMESSD.NVMESSD", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.NVMEFormFactor.NVMEFormFactor", "NVMEFormFactor")
                        .WithMany()
                        .HasForeignKey("NVMEFormFactorUUID")
                        .IsRequired()
                        .HasConstraintName("nvmessd_nvmeformfactoruuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.NVMEInterface.NVMEInterface", "NVMEInterface")
                        .WithMany()
                        .HasForeignKey("NVMEInterfaceUUID")
                        .IsRequired()
                        .HasConstraintName("nvmessd_nvmeinterfaceuuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.Storage.Storage", "Storage")
                        .WithOne()
                        .HasForeignKey("ComputerConfigurator.Api.NVMESSD.NVMESSD", "UUID")
                        .IsRequired()
                        .HasConstraintName("nvmessd_storageuuid_fkey");

                    b.Navigation("NVMEFormFactor");

                    b.Navigation("NVMEInterface");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.SATAHDD.SATAHDD", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.MountedStorageFormFactor.MountedStorageFormFactor", "MountedStorageFormFactor")
                        .WithMany()
                        .HasForeignKey("MountedStorageFormFactorUUID")
                        .IsRequired()
                        .HasConstraintName("satahdd_mountedstorageformfactoruuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.Storage.Storage", "Storage")
                        .WithOne()
                        .HasForeignKey("ComputerConfigurator.Api.SATAHDD.SATAHDD", "UUID")
                        .IsRequired()
                        .HasConstraintName("satahdd_storageuuid_fkey");

                    b.Navigation("MountedStorageFormFactor");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.SATASSD.SATASSD", b =>
                {
                    b.HasOne("ComputerConfigurator.Api.MountedStorageFormFactor.MountedStorageFormFactor", "MountedStorageFormFactor")
                        .WithMany()
                        .HasForeignKey("MountedStorageFormFactorUUID")
                        .IsRequired()
                        .HasConstraintName("satassd_mountedstorageformfactoruuid_fkey");

                    b.HasOne("ComputerConfigurator.Api.Storage.Storage", "Storage")
                        .WithOne()
                        .HasForeignKey("ComputerConfigurator.Api.SATASSD.SATASSD", "UUID")
                        .IsRequired()
                        .HasConstraintName("satassd_storageuuid_fkey");

                    b.Navigation("MountedStorageFormFactor");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.PCIEGeneration.PCIEGeneration", b =>
                {
                    b.Navigation("PCIEConnectors");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.Chassis.Chassis", b =>
                {
                    b.Navigation("AudioPorts");

                    b.Navigation("FanSupport");

                    b.Navigation("FilterSupport");

                    b.Navigation("MotherboardFormFactorSupport");

                    b.Navigation("PowerSupplyFormFactorSupport");

                    b.Navigation("RadiatorSupport");

                    b.Navigation("USBPorts");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.CPUCooler.CPUCooler", b =>
                {
                    b.Navigation("CPUCoolerFans");

                    b.Navigation("CPUSockets");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.GPU.GPU", b =>
                {
                    b.Navigation("DisplayConnectors");
                });

            modelBuilder.Entity("ComputerConfigurator.Api.Motherboard.Motherboard", b =>
                {
                    b.Navigation("DisplayConnectors");

                    b.Navigation("EthernetPorts");

                    b.Navigation("FanHeaders");

                    b.Navigation("NVMEConnectors");

                    b.Navigation("PCIEConnectors");

                    b.Navigation("RAMSockets");

                    b.Navigation("SATAConnectors");

                    b.Navigation("SupportedRAMSpeeds");

                    b.Navigation("USBPorts");
                });
#pragma warning restore 612, 618
        }
    }
}
